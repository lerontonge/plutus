(program
  (let
    (nonrec)
    (termbind
      (strict)
      (vardecl
        subtractInteger (fun (con integer) (fun (con integer) (con integer)))
      )
      (lam
        x
        (con integer)
        (lam y (con integer) [ [ (builtin subtractInteger) x ] y ])
      )
    )
    (datatypebind
      (datatype
        (tyvardecl Bool (type))

        Bool_match
        (vardecl True Bool) (vardecl False Bool)
      )
    )
    (termbind
      (strict)
      (vardecl builtinBoolToBool (fun (con bool) Bool))
      (lam b (con bool) [ [ [ { (builtin ifThenElse) Bool } b ] True ] False ])
    )
    (termbind
      (strict)
      (vardecl equalsInteger (fun (con integer) (fun (con integer) Bool)))
      (lam
        x
        (con integer)
        (lam
          y
          (con integer)
<<<<<<< HEAD
          [
            [
              [ { (builtin ifThenElse) Bool } [ [ (builtin eqInteger) x ] y ] ]
              True
            ]
            False
          ]
||||||| parent of ac6d6c898 (WIP)
          (let
            (nonrec)
            (termbind
              (strict)
              (vardecl b (con bool))
              [ [ (builtin eqInteger) arg ] arg ]
            )
            [ [ [ { (builtin ifThenElse) Bool } b ] True ] False ]
          )
=======
          [ builtinBoolToBool [ [ (builtin eqInteger) arg ] arg ] ]
>>>>>>> ac6d6c898 (WIP)
        )
      )
    )
    (datatypebind
      (datatype (tyvardecl Unit (type))  Unit_match (vardecl Unit Unit))
    )
    (let
      (rec)
      (termbind
        (strict)
        (vardecl even (fun (con integer) Bool))
        (lam
          n
          (con integer)
          [
            [
              [
                {
                  [ Bool_match [ [ equalsInteger n ] (con integer 0) ] ]
                  (fun Unit Bool)
                }
                (lam thunk Unit True)
              ]
              (lam
                thunk
                Unit
                (let
                  (nonrec)
                  (termbind
                    (nonstrict)
                    (vardecl n (con integer))
                    [ [ subtractInteger n ] (con integer 1) ]
                  )
                  [
                    [
                      [
                        {
                          [ Bool_match [ [ equalsInteger n ] (con integer 0) ] ]
                          (fun Unit Bool)
                        }
                        (lam thunk Unit False)
                      ]
                      (lam
                        thunk
                        Unit
                        [ even [ [ subtractInteger n ] (con integer 1) ] ]
                      )
                    ]
                    Unit
                  ]
                )
              )
            ]
            Unit
          ]
        )
      )
      even
    )
  )
)