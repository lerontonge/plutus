(program
  (let
    (nonrec)
    (termbind
      (strict)
      (vardecl
        divideInteger (fun (con integer) (fun (con integer) (con integer)))
      )
      (lam
        x
        (con integer)
        (lam y (con integer) [ [ (builtin divideInteger) x ] y ])
      )
    )
    (datatypebind
      (datatype
        (tyvardecl Bool (type))

        Bool_match
        (vardecl True Bool) (vardecl False Bool)
      )
    )
    (termbind
      (strict)
      (vardecl builtinBoolToBool (fun (con bool) Bool))
      (lam b (con bool) [ [ [ { (builtin ifThenElse) Bool } b ] True ] False ])
    )
    (termbind
      (strict)
      (vardecl equalsInteger (fun (con integer) (fun (con integer) Bool)))
      (lam
        x
        (con integer)
        (lam
          y
          (con integer)
<<<<<<< HEAD
          [
            [
              [ { (builtin ifThenElse) Bool } [ [ (builtin eqInteger) x ] y ] ]
              True
            ]
            False
          ]
||||||| parent of ac6d6c898 (WIP)
          (let
            (nonrec)
            (termbind
              (strict)
              (vardecl b (con bool))
              [ [ (builtin eqInteger) arg ] arg ]
            )
            [ [ [ { (builtin ifThenElse) Bool } b ] True ] False ]
          )
=======
          [ builtinBoolToBool [ [ (builtin eqInteger) arg ] arg ] ]
>>>>>>> ac6d6c898 (WIP)
        )
      )
    )
    (termbind
      (strict)
      (vardecl wild Bool)
      [
        [ equalsInteger [ [ divideInteger (con integer 1) ] (con integer 0) ] ]
        (con integer 0)
      ]
    )
    (con integer 1)
  )
)